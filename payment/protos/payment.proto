syntax = "proto3";

import "google/protobuf/empty.proto";
import "providers/freedompay.proto";
import "providers/worldpay.proto";

package oak.platform;

service Payment {
  rpc Info (google.protobuf.Empty) returns (PaymentServiceInfo) {}
  rpc Configure (PaymentConfiguration) returns (google.protobuf.Empty) {}
  rpc Sale (SaleRequest) returns (SaleResponse) {}
  rpc Auth (SaleRequest) returns (SaleResponse) {}
  rpc Capture (SaleRequest) returns (SaleResponse) {}
}

message PaymentServiceInfo {
  bool configured = 1;
  PaymentConfiguration configuration = 2;
}

message PaymentConfiguration {
  repeated PaymentProvider providers = 1;
}

enum PaymentProviderType {
  TEST = 0;
  FREEDOMPAY = 1;
  WORLDPAY = 2;
}

enum PaymentSolutionType {
  DEFAULT = 0;
  POS = 1;
  CLOUD = 2;
}

message PaymentProvider {
  string provider_name = 1; // required
  PaymentProviderType provider_type = 2; // required
  PaymentSolutionType solution = 3; // optional
  string host = 4; // required for most solutions... location of payment service on LAN or WWW
  string api_id = 5; // optional... credentials for authenticated provider, WorldPay's Developer Key
  string api_key = 6; // optional... credentials for authenticated provider, WOrldPay's Developer Secret
  BatchInterval batch_interval = 7;
  int32 batch_hour = 8; // 0-23
  string location_id = 9; // required for FreedomPay
  string terminal_id = 10; // required for FreedomPay
  string environment_description = 11; // optional
  int32 application_id = 12; // required for WorldPay
  int32 lane_id = 13; // required for WorldPay

  enum BatchInterval {
    OFF = 0;
    DAILY = 1;
    WEEKLY = 2;
  }
}

message SaleRequest {
  StandardSaleRequest sale_request = 1;
  FreedomPayRequest freedompay_request = 2;
  WorldPayRequest worldpay_request = 3;
}

enum Currency {
  USD = 0;
}

message StandardSaleRequest {
  string provider_name = 1; // one of the PaymentProviders provided in configuration
  string amount = 2; // string containing dollars/cents, decimal separated
  Currency currency = 3;
  string transaction_id = 4;
  string location_id = 5;
  int32 terminal_id = 6; 
  string merchant_ref = 7; //required for FreedomPay
  string invoice_number = 8;
}

message SaleResponse {
  PaymentProviderType provider_type = 1;
  StandardSaleResponse response = 2;
  FreedomPayResponse freedompay_response = 3;
  WorldPayResponse worldpay_response = 4;
}

message StandardSaleResponse {
  ResponseStatus status = 1;
  string error = 2;
  string sale_amount = 3;
  Currency currency = 4;
  string masked_card_number = 5;
  string name_on_card = 6;
  string transaction_id = 7;
  string card_issuer = 8;

  enum ResponseStatus {
    INTERNAL_ERROR = 0; // something internal failed
    ACCEPTED = 1; // success
    REJECTED = 2; // insufficient funds, bad card, etc.
    INPUT_ERROR = 3; // bad input
  }
}
